
InputCaptureSW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002516  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00002516  000025aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  00800184  00800184  000026ce  2**0
                  ALLOC
  3 .stab         00001d1c  00000000  00000000  000026d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ef7  00000000  00000000  000043ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000052e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005463  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005636  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007645  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000087b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000097b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  00009958  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  00009c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a4c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__vector_1>
       8:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__vector_10>
      2c:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 10 	call	0x2156	; 0x2156 <main>
      8a:	0c 94 89 12 	jmp	0x2512	; 0x2512 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ed 57       	subi	r30, 0x7D	; 125
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_vidSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void DIO_vidSetPinDirection	( u8 Copy_U8Port  ,  u8 Copy_U8Pin  ,  u8 Copy_U8Direction)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	27 97       	sbiw	r28, 0x07	; 7
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
     cee:	4b 83       	std	Y+3, r20	; 0x03
	if( 1 == Copy_U8Direction )
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <DIO_vidSetPinDirection+0x22>
     cf6:	6f c0       	rjmp	.+222    	; 0xdd6 <DIO_vidSetPinDirection+0x100>
	{
		switch(Copy_U8Port)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	3f 83       	std	Y+7, r19	; 0x07
     d00:	2e 83       	std	Y+6, r18	; 0x06
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	91 05       	cpc	r25, r1
     d0a:	49 f1       	breq	.+82     	; 0xd5e <DIO_vidSetPinDirection+0x88>
     d0c:	2e 81       	ldd	r18, Y+6	; 0x06
     d0e:	3f 81       	ldd	r19, Y+7	; 0x07
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	2c f4       	brge	.+10     	; 0xd20 <DIO_vidSetPinDirection+0x4a>
     d16:	8e 81       	ldd	r24, Y+6	; 0x06
     d18:	9f 81       	ldd	r25, Y+7	; 0x07
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	61 f0       	breq	.+24     	; 0xd36 <DIO_vidSetPinDirection+0x60>
     d1e:	d2 c0       	rjmp	.+420    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
     d20:	2e 81       	ldd	r18, Y+6	; 0x06
     d22:	3f 81       	ldd	r19, Y+7	; 0x07
     d24:	22 30       	cpi	r18, 0x02	; 2
     d26:	31 05       	cpc	r19, r1
     d28:	71 f1       	breq	.+92     	; 0xd86 <DIO_vidSetPinDirection+0xb0>
     d2a:	8e 81       	ldd	r24, Y+6	; 0x06
     d2c:	9f 81       	ldd	r25, Y+7	; 0x07
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	91 05       	cpc	r25, r1
     d32:	e9 f1       	breq	.+122    	; 0xdae <DIO_vidSetPinDirection+0xd8>
     d34:	c7 c0       	rjmp	.+398    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
		{
			case 0 :  SET_BIT(DDRA , Copy_U8Pin );     break;
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_vidSetPinDirection+0x7e>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_vidSetPinDirection+0x7a>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	b3 c0       	rjmp	.+358    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
			case 1 :  SET_BIT(DDRB , Copy_U8Pin );     break;
     d5e:	a7 e3       	ldi	r26, 0x37	; 55
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e7 e3       	ldi	r30, 0x37	; 55
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_vidSetPinDirection+0xa6>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_vidSetPinDirection+0xa2>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	9f c0       	rjmp	.+318    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
			case 2 :  SET_BIT(DDRC , Copy_U8Pin );     break;
     d86:	a4 e3       	ldi	r26, 0x34	; 52
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e4 e3       	ldi	r30, 0x34	; 52
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_vidSetPinDirection+0xce>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_vidSetPinDirection+0xca>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	8b c0       	rjmp	.+278    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
			case 3 :  SET_BIT(DDRD , Copy_U8Pin );     break;
     dae:	a1 e3       	ldi	r26, 0x31	; 49
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e1 e3       	ldi	r30, 0x31	; 49
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_vidSetPinDirection+0xf6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_vidSetPinDirection+0xf2>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	77 c0       	rjmp	.+238    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
		}
	}
	else if( 0 == Copy_U8Direction )
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	88 23       	and	r24, r24
     dda:	09 f0       	breq	.+2      	; 0xdde <DIO_vidSetPinDirection+0x108>
     ddc:	73 c0       	rjmp	.+230    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
	{
		switch(Copy_U8Port)
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3d 83       	std	Y+5, r19	; 0x05
     de6:	2c 83       	std	Y+4, r18	; 0x04
     de8:	8c 81       	ldd	r24, Y+4	; 0x04
     dea:	9d 81       	ldd	r25, Y+5	; 0x05
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	59 f1       	breq	.+86     	; 0xe48 <DIO_vidSetPinDirection+0x172>
     df2:	2c 81       	ldd	r18, Y+4	; 0x04
     df4:	3d 81       	ldd	r19, Y+5	; 0x05
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f4       	brge	.+10     	; 0xe06 <DIO_vidSetPinDirection+0x130>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	9d 81       	ldd	r25, Y+5	; 0x05
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	69 f0       	breq	.+26     	; 0xe1e <DIO_vidSetPinDirection+0x148>
     e04:	5f c0       	rjmp	.+190    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
     e06:	2c 81       	ldd	r18, Y+4	; 0x04
     e08:	3d 81       	ldd	r19, Y+5	; 0x05
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	89 f1       	breq	.+98     	; 0xe72 <DIO_vidSetPinDirection+0x19c>
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_vidSetPinDirection+0x146>
     e1a:	40 c0       	rjmp	.+128    	; 0xe9c <DIO_vidSetPinDirection+0x1c6>
     e1c:	53 c0       	rjmp	.+166    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
		{
			case 0 :  CLR_BIT(DDRA , Copy_U8Pin );     break;
     e1e:	aa e3       	ldi	r26, 0x3A	; 58
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ea e3       	ldi	r30, 0x3A	; 58
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_vidSetPinDirection+0x166>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_vidSetPinDirection+0x162>
     e40:	80 95       	com	r24
     e42:	84 23       	and	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	3e c0       	rjmp	.+124    	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
			case 1 :  CLR_BIT(DDRB , Copy_U8Pin );     break;
     e48:	a7 e3       	ldi	r26, 0x37	; 55
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e3       	ldi	r30, 0x37	; 55
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_vidSetPinDirection+0x190>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_vidSetPinDirection+0x18c>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	29 c0       	rjmp	.+82     	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
			case 2 :  CLR_BIT(DDRC , Copy_U8Pin );     break;
     e72:	a4 e3       	ldi	r26, 0x34	; 52
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e4 e3       	ldi	r30, 0x34	; 52
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_vidSetPinDirection+0x1ba>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_vidSetPinDirection+0x1b6>
     e94:	80 95       	com	r24
     e96:	84 23       	and	r24, r20
     e98:	8c 93       	st	X, r24
     e9a:	14 c0       	rjmp	.+40     	; 0xec4 <DIO_vidSetPinDirection+0x1ee>
			case 3 :  CLR_BIT(DDRD , Copy_U8Pin );     break;
     e9c:	a1 e3       	ldi	r26, 0x31	; 49
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e1 e3       	ldi	r30, 0x31	; 49
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	48 2f       	mov	r20, r24
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 2e       	mov	r0, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_vidSetPinDirection+0x1e4>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	0a 94       	dec	r0
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_vidSetPinDirection+0x1e0>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
	}
	else
	{
		
	}
}
     ec4:	27 96       	adiw	r28, 0x07	; 7
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_vidSetPinValue>:


void DIO_vidSetPinValue( u8 Copy_U8Port  ,  u8 Copy_U8Pin  ,  u8 Copy_U8Value     )
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	27 97       	sbiw	r28, 0x07	; 7
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
     eea:	89 83       	std	Y+1, r24	; 0x01
     eec:	6a 83       	std	Y+2, r22	; 0x02
     eee:	4b 83       	std	Y+3, r20	; 0x03
	if( 1 == Copy_U8Value )
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <DIO_vidSetPinValue+0x22>
     ef6:	6f c0       	rjmp	.+222    	; 0xfd6 <DIO_vidSetPinValue+0x100>
	{
		switch(Copy_U8Port)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3f 83       	std	Y+7, r19	; 0x07
     f00:	2e 83       	std	Y+6, r18	; 0x06
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	91 05       	cpc	r25, r1
     f0a:	49 f1       	breq	.+82     	; 0xf5e <DIO_vidSetPinValue+0x88>
     f0c:	2e 81       	ldd	r18, Y+6	; 0x06
     f0e:	3f 81       	ldd	r19, Y+7	; 0x07
     f10:	22 30       	cpi	r18, 0x02	; 2
     f12:	31 05       	cpc	r19, r1
     f14:	2c f4       	brge	.+10     	; 0xf20 <DIO_vidSetPinValue+0x4a>
     f16:	8e 81       	ldd	r24, Y+6	; 0x06
     f18:	9f 81       	ldd	r25, Y+7	; 0x07
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	61 f0       	breq	.+24     	; 0xf36 <DIO_vidSetPinValue+0x60>
     f1e:	d2 c0       	rjmp	.+420    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
     f20:	2e 81       	ldd	r18, Y+6	; 0x06
     f22:	3f 81       	ldd	r19, Y+7	; 0x07
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	71 f1       	breq	.+92     	; 0xf86 <DIO_vidSetPinValue+0xb0>
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	83 30       	cpi	r24, 0x03	; 3
     f30:	91 05       	cpc	r25, r1
     f32:	e9 f1       	breq	.+122    	; 0xfae <DIO_vidSetPinValue+0xd8>
     f34:	c7 c0       	rjmp	.+398    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
		{
			case 0 :  SET_BIT(PORTA , Copy_U8Pin );     break;
     f36:	ab e3       	ldi	r26, 0x3B	; 59
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_vidSetPinValue+0x7e>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_vidSetPinValue+0x7a>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	b3 c0       	rjmp	.+358    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
			case 1 :  SET_BIT(PORTB , Copy_U8Pin );     break;
     f5e:	a8 e3       	ldi	r26, 0x38	; 56
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e3       	ldi	r30, 0x38	; 56
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_vidSetPinValue+0xa6>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_vidSetPinValue+0xa2>
     f80:	84 2b       	or	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	9f c0       	rjmp	.+318    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
			case 2 :  SET_BIT(PORTC , Copy_U8Pin );     break;
     f86:	a5 e3       	ldi	r26, 0x35	; 53
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e5 e3       	ldi	r30, 0x35	; 53
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_vidSetPinValue+0xce>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_vidSetPinValue+0xca>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	8b c0       	rjmp	.+278    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
			case 3 :  SET_BIT(PORTD , Copy_U8Pin );     break;
     fae:	a2 e3       	ldi	r26, 0x32	; 50
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_vidSetPinValue+0xf6>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_vidSetPinValue+0xf2>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	77 c0       	rjmp	.+238    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
		}
	}
	else if( 0 == Copy_U8Value )
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 23       	and	r24, r24
     fda:	09 f0       	breq	.+2      	; 0xfde <DIO_vidSetPinValue+0x108>
     fdc:	73 c0       	rjmp	.+230    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
	{
		switch(Copy_U8Port)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	3d 83       	std	Y+5, r19	; 0x05
     fe6:	2c 83       	std	Y+4, r18	; 0x04
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	91 05       	cpc	r25, r1
     ff0:	59 f1       	breq	.+86     	; 0x1048 <DIO_vidSetPinValue+0x172>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	22 30       	cpi	r18, 0x02	; 2
     ff8:	31 05       	cpc	r19, r1
     ffa:	2c f4       	brge	.+10     	; 0x1006 <DIO_vidSetPinValue+0x130>
     ffc:	8c 81       	ldd	r24, Y+4	; 0x04
     ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	69 f0       	breq	.+26     	; 0x101e <DIO_vidSetPinValue+0x148>
    1004:	5f c0       	rjmp	.+190    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	89 f1       	breq	.+98     	; 0x1072 <DIO_vidSetPinValue+0x19c>
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	9d 81       	ldd	r25, Y+5	; 0x05
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <DIO_vidSetPinValue+0x146>
    101a:	40 c0       	rjmp	.+128    	; 0x109c <DIO_vidSetPinValue+0x1c6>
    101c:	53 c0       	rjmp	.+166    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
		{
			case 0 :  CLR_BIT(PORTA , Copy_U8Pin );     break;
    101e:	ab e3       	ldi	r26, 0x3B	; 59
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	eb e3       	ldi	r30, 0x3B	; 59
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_vidSetPinValue+0x166>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_vidSetPinValue+0x162>
    1040:	80 95       	com	r24
    1042:	84 23       	and	r24, r20
    1044:	8c 93       	st	X, r24
    1046:	3e c0       	rjmp	.+124    	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
			case 1 :  CLR_BIT(PORTB , Copy_U8Pin );     break;
    1048:	a8 e3       	ldi	r26, 0x38	; 56
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 e3       	ldi	r30, 0x38	; 56
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	48 2f       	mov	r20, r24
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	02 2e       	mov	r0, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_vidSetPinValue+0x190>
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_vidSetPinValue+0x18c>
    106a:	80 95       	com	r24
    106c:	84 23       	and	r24, r20
    106e:	8c 93       	st	X, r24
    1070:	29 c0       	rjmp	.+82     	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
			case 2 :  CLR_BIT(PORTC , Copy_U8Pin );     break;
    1072:	a5 e3       	ldi	r26, 0x35	; 53
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e3       	ldi	r30, 0x35	; 53
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_vidSetPinValue+0x1ba>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_vidSetPinValue+0x1b6>
    1094:	80 95       	com	r24
    1096:	84 23       	and	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <DIO_vidSetPinValue+0x1ee>
			case 3 :  CLR_BIT(PORTD , Copy_U8Pin );     break;
    109c:	a2 e3       	ldi	r26, 0x32	; 50
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e2 e3       	ldi	r30, 0x32	; 50
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_vidSetPinValue+0x1e4>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_vidSetPinValue+0x1e0>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
	}
	else
	{
		
	}
}
    10c4:	27 96       	adiw	r28, 0x07	; 7
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <DIO_u8GetPinValue>:


u8   DIO_u8GetPinValue( u8 Copy_U8Port   ,  u8 Copy_U8Pin )
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <DIO_u8GetPinValue+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_u8GetPinValue+0x8>
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	8a 83       	std	Y+2, r24	; 0x02
    10e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinVal = 0;
    10e8:	19 82       	std	Y+1, r1	; 0x01
	
	switch(Copy_U8Port)
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3d 83       	std	Y+5, r19	; 0x05
    10f2:	2c 83       	std	Y+4, r18	; 0x04
    10f4:	4c 81       	ldd	r20, Y+4	; 0x04
    10f6:	5d 81       	ldd	r21, Y+5	; 0x05
    10f8:	41 30       	cpi	r20, 0x01	; 1
    10fa:	51 05       	cpc	r21, r1
    10fc:	41 f1       	breq	.+80     	; 0x114e <DIO_u8GetPinValue+0x78>
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	91 05       	cpc	r25, r1
    1106:	34 f4       	brge	.+12     	; 0x1114 <DIO_u8GetPinValue+0x3e>
    1108:	2c 81       	ldd	r18, Y+4	; 0x04
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	61 f0       	breq	.+24     	; 0x112a <DIO_u8GetPinValue+0x54>
    1112:	52 c0       	rjmp	.+164    	; 0x11b8 <DIO_u8GetPinValue+0xe2>
    1114:	4c 81       	ldd	r20, Y+4	; 0x04
    1116:	5d 81       	ldd	r21, Y+5	; 0x05
    1118:	42 30       	cpi	r20, 0x02	; 2
    111a:	51 05       	cpc	r21, r1
    111c:	51 f1       	breq	.+84     	; 0x1172 <DIO_u8GetPinValue+0x9c>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	91 05       	cpc	r25, r1
    1126:	b9 f1       	breq	.+110    	; 0x1196 <DIO_u8GetPinValue+0xc0>
    1128:	47 c0       	rjmp	.+142    	; 0x11b8 <DIO_u8GetPinValue+0xe2>
	{
			case 0 :  Local_u8PinVal = GET_BIT(PINA , Copy_U8Pin );     break;
    112a:	e9 e3       	ldi	r30, 0x39	; 57
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a9 01       	movw	r20, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8GetPinValue+0x6c>
    113e:	55 95       	asr	r21
    1140:	47 95       	ror	r20
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8GetPinValue+0x68>
    1146:	ca 01       	movw	r24, r20
    1148:	81 70       	andi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	35 c0       	rjmp	.+106    	; 0x11b8 <DIO_u8GetPinValue+0xe2>
			case 1 :  Local_u8PinVal = GET_BIT(PINB , Copy_U8Pin );     break;
    114e:	e6 e3       	ldi	r30, 0x36	; 54
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8GetPinValue+0x90>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8GetPinValue+0x8c>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	23 c0       	rjmp	.+70     	; 0x11b8 <DIO_u8GetPinValue+0xe2>
			case 2 :  Local_u8PinVal = GET_BIT(PINC , Copy_U8Pin );     break;
    1172:	e3 e3       	ldi	r30, 0x33	; 51
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_u8GetPinValue+0xb4>
    1186:	55 95       	asr	r21
    1188:	47 95       	ror	r20
    118a:	8a 95       	dec	r24
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_u8GetPinValue+0xb0>
    118e:	ca 01       	movw	r24, r20
    1190:	81 70       	andi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <DIO_u8GetPinValue+0xe2>
			case 3 :  Local_u8PinVal = GET_BIT(PIND , Copy_U8Pin );     break;
    1196:	e0 e3       	ldi	r30, 0x30	; 48
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a9 01       	movw	r20, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_u8GetPinValue+0xd8>
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	8a 95       	dec	r24
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_u8GetPinValue+0xd4>
    11b2:	ca 01       	movw	r24, r20
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
	
	}
	return Local_u8PinVal;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <DIO_vidTogglePin>:



void DIO_vidTogglePin( u8 Copy_U8Port     ,  u8 Copy_U8Pin	)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_vidTogglePin+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_vidTogglePin+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Port)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3c 83       	std	Y+4, r19	; 0x04
    11e2:	2b 83       	std	Y+3, r18	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	49 f1       	breq	.+82     	; 0x1240 <DIO_vidTogglePin+0x76>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_vidTogglePin+0x38>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_vidTogglePin+0x4e>
    1200:	5a c0       	rjmp	.+180    	; 0x12b6 <DIO_vidTogglePin+0xec>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	71 f1       	breq	.+92     	; 0x1268 <DIO_vidTogglePin+0x9e>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	e9 f1       	breq	.+122    	; 0x1290 <DIO_vidTogglePin+0xc6>
    1216:	4f c0       	rjmp	.+158    	; 0x12b6 <DIO_vidTogglePin+0xec>
	{
		case 0 :  TOGGLE_BIT(PORTA , Copy_U8Pin );     break;
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_vidTogglePin+0x6c>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_vidTogglePin+0x68>
    123a:	84 27       	eor	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	3b c0       	rjmp	.+118    	; 0x12b6 <DIO_vidTogglePin+0xec>
		case 1 :  TOGGLE_BIT(PORTB , Copy_U8Pin );     break;
    1240:	a8 e3       	ldi	r26, 0x38	; 56
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e8 e3       	ldi	r30, 0x38	; 56
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_vidTogglePin+0x94>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_vidTogglePin+0x90>
    1262:	84 27       	eor	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	27 c0       	rjmp	.+78     	; 0x12b6 <DIO_vidTogglePin+0xec>
		case 2 :  TOGGLE_BIT(PORTC , Copy_U8Pin );     break;
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_vidTogglePin+0xbc>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_vidTogglePin+0xb8>
    128a:	84 27       	eor	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <DIO_vidTogglePin+0xec>
		case 3 :  TOGGLE_BIT(PORTD , Copy_U8Pin );     break;
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_vidTogglePin+0xe4>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_vidTogglePin+0xe0>
    12b2:	84 27       	eor	r24, r20
    12b4:	8c 93       	st	X, r24
	
	}
}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	cf 91       	pop	r28
    12c0:	df 91       	pop	r29
    12c2:	08 95       	ret

000012c4 <DIO_vidSetPortDirection>:



void DIO_vidSetPortDirection( u8 Copy_U8Port  ,  u8 Copy_U8Direction)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_vidSetPortDirection+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_vidSetPortDirection+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8Port)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3c 83       	std	Y+4, r19	; 0x04
    12dc:	2b 83       	std	Y+3, r18	; 0x03
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	d1 f0       	breq	.+52     	; 0x131c <DIO_vidSetPortDirection+0x58>
    12e8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ea:	3c 81       	ldd	r19, Y+4	; 0x04
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	2c f4       	brge	.+10     	; 0x12fc <DIO_vidSetPortDirection+0x38>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	61 f0       	breq	.+24     	; 0x1312 <DIO_vidSetPortDirection+0x4e>
    12fa:	1e c0       	rjmp	.+60     	; 0x1338 <DIO_vidSetPortDirection+0x74>
    12fc:	2b 81       	ldd	r18, Y+3	; 0x03
    12fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	81 f0       	breq	.+32     	; 0x1326 <DIO_vidSetPortDirection+0x62>
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	83 30       	cpi	r24, 0x03	; 3
    130c:	91 05       	cpc	r25, r1
    130e:	81 f0       	breq	.+32     	; 0x1330 <DIO_vidSetPortDirection+0x6c>
    1310:	13 c0       	rjmp	.+38     	; 0x1338 <DIO_vidSetPortDirection+0x74>
	{
		case 0 :  DDRA = Copy_U8Direction  ;     break;
    1312:	ea e3       	ldi	r30, 0x3A	; 58
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	80 83       	st	Z, r24
    131a:	0e c0       	rjmp	.+28     	; 0x1338 <DIO_vidSetPortDirection+0x74>
		case 1 :  DDRB = Copy_U8Direction  ;     break;
    131c:	e7 e3       	ldi	r30, 0x37	; 55
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	80 83       	st	Z, r24
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <DIO_vidSetPortDirection+0x74>
		case 2 :  DDRC = Copy_U8Direction  ;     break;
    1326:	e4 e3       	ldi	r30, 0x34	; 52
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	80 83       	st	Z, r24
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <DIO_vidSetPortDirection+0x74>
		case 3 :  DDRD = Copy_U8Direction  ;     break;
    1330:	e1 e3       	ldi	r30, 0x31	; 49
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	80 83       	st	Z, r24
	}

}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <DIO_vidSetPortValue>:



void DIO_vidSetPortValue( u8 Copy_U8Port  ,  u8 Copy_U8Value		)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <DIO_vidSetPortValue+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <DIO_vidSetPortValue+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8Port)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3c 83       	std	Y+4, r19	; 0x04
    135e:	2b 83       	std	Y+3, r18	; 0x03
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	91 05       	cpc	r25, r1
    1368:	d1 f0       	breq	.+52     	; 0x139e <DIO_vidSetPortValue+0x58>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	3c 81       	ldd	r19, Y+4	; 0x04
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <DIO_vidSetPortValue+0x38>
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	61 f0       	breq	.+24     	; 0x1394 <DIO_vidSetPortValue+0x4e>
    137c:	1e c0       	rjmp	.+60     	; 0x13ba <DIO_vidSetPortValue+0x74>
    137e:	2b 81       	ldd	r18, Y+3	; 0x03
    1380:	3c 81       	ldd	r19, Y+4	; 0x04
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	81 f0       	breq	.+32     	; 0x13a8 <DIO_vidSetPortValue+0x62>
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	81 f0       	breq	.+32     	; 0x13b2 <DIO_vidSetPortValue+0x6c>
    1392:	13 c0       	rjmp	.+38     	; 0x13ba <DIO_vidSetPortValue+0x74>
	{
		case 0 :  PORTA = Copy_U8Value  ;     break;
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	80 83       	st	Z, r24
    139c:	0e c0       	rjmp	.+28     	; 0x13ba <DIO_vidSetPortValue+0x74>
		case 1 :  PORTB = Copy_U8Value  ;     break;
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	80 83       	st	Z, r24
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <DIO_vidSetPortValue+0x74>
		case 2 :  PORTC = Copy_U8Value  ;     break;
    13a8:	e5 e3       	ldi	r30, 0x35	; 53
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	80 83       	st	Z, r24
    13b0:	04 c0       	rjmp	.+8      	; 0x13ba <DIO_vidSetPortValue+0x74>
		case 3 :  PORTD = Copy_U8Value  ;     break;
    13b2:	e2 e3       	ldi	r30, 0x32	; 50
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	80 83       	st	Z, r24
	}
}
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <INT_vidInit>:

static void(*pfun_0)(void);   //pointer to function
static void(*pfun_1)(void);

void INT_vidInit(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
/* INT0 */
#if INT_u8INTERRUPT_0_CFG == INT_u8INTERRUPT_0_ENABLE  //INT0
	//Enable Interrupt 0
	GICR.Bits.INT_0 = 1;
    13d0:	eb e5       	ldi	r30, 0x5B	; 91
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	80 83       	st	Z, r24
		//Rise Interrupt Flag At FALLING_EDGE Event
		MCUCR.Bits.ISC0 = 2;

		#elif INT0_u8INTERRUPT_SOURCE == INT_u8PIF_RISING_EDGE
		//Rise Interrupt Flag At RISING_EDGE Event
		MCUCR.Bits.ISC0 = 3;
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	83 60       	ori	r24, 0x03	; 3
    13e2:	80 83       	st	Z, r24
		MCUCR.Bits.ISC1 = 3;
	#endif

#elif INT_u8INTERRUPT_1_CFG == INT_u8INTERRUPT_1_DISABLE
	//Disable Interrupt 1
	GICR.Bits.INT_1 = 0;
    13e4:	eb e5       	ldi	r30, 0x5B	; 91
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	8f 77       	andi	r24, 0x7F	; 127
    13ec:	80 83       	st	Z, r24
#endif

}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <IN0_vidSenseControl>:


void IN0_vidSenseControl(u8 Val)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01
	MCUCR.Bits.ISC0 = Val;
    1400:	e5 e5       	ldi	r30, 0x55	; 85
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	83 70       	andi	r24, 0x03	; 3
    1408:	98 2f       	mov	r25, r24
    140a:	93 70       	andi	r25, 0x03	; 3
    140c:	80 81       	ld	r24, Z
    140e:	8c 7f       	andi	r24, 0xFC	; 252
    1410:	89 2b       	or	r24, r25
    1412:	80 83       	st	Z, r24
}
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <IN1_vidSenseControl>:


void IN1_vidSenseControl(u8 Val)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	0f 92       	push	r0
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
	MCUCR.Bits.ISC1 = Val;
    1428:	e5 e5       	ldi	r30, 0x55	; 85
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	83 70       	andi	r24, 0x03	; 3
    1430:	83 70       	andi	r24, 0x03	; 3
    1432:	98 2f       	mov	r25, r24
    1434:	99 0f       	add	r25, r25
    1436:	99 0f       	add	r25, r25
    1438:	80 81       	ld	r24, Z
    143a:	83 7f       	andi	r24, 0xF3	; 243
    143c:	89 2b       	or	r24, r25
    143e:	80 83       	st	Z, r24
}
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <INT0_vidSetCB>:
}*/


//Call_Back function has an address of another function in main.c for INT0
void INT0_vidSetCB(void(*pf)(void))
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <INT0_vidSetCB+0x6>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
	pfun_0 = pf;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	90 93 85 01 	sts	0x0185, r25
    145e:	80 93 84 01 	sts	0x0184, r24
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <INT1_vidSetCB>:

//function has an address of another function in main.c for INT1
void INT1_vidSetCB(void(*pf)(void))
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <INT1_vidSetCB+0x6>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
	pfun_1 = pf;
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	90 93 87 01 	sts	0x0187, r25
    1482:	80 93 86 01 	sts	0x0186, r24
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <__vector_1>:
//ISR OF INT0
void __vector_1 (void)
{
    1490:	1f 92       	push	r1
    1492:	0f 92       	push	r0
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	0f 92       	push	r0
    1498:	11 24       	eor	r1, r1
    149a:	2f 93       	push	r18
    149c:	3f 93       	push	r19
    149e:	4f 93       	push	r20
    14a0:	5f 93       	push	r21
    14a2:	6f 93       	push	r22
    14a4:	7f 93       	push	r23
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	ef 93       	push	r30
    14b0:	ff 93       	push	r31
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	pfun_0();
    14ba:	e0 91 84 01 	lds	r30, 0x0184
    14be:	f0 91 85 01 	lds	r31, 0x0185
    14c2:	09 95       	icall
}
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	ff 91       	pop	r31
    14ca:	ef 91       	pop	r30
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	7f 91       	pop	r23
    14d6:	6f 91       	pop	r22
    14d8:	5f 91       	pop	r21
    14da:	4f 91       	pop	r20
    14dc:	3f 91       	pop	r19
    14de:	2f 91       	pop	r18
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	0f 90       	pop	r0
    14e6:	1f 90       	pop	r1
    14e8:	18 95       	reti

000014ea <__vector_2>:
//ISR OF INT1
void __vector_2 (void)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
	pfun_1();
    1514:	e0 91 86 01 	lds	r30, 0x0186
    1518:	f0 91 87 01 	lds	r31, 0x0187
    151c:	09 95       	icall
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <LCD_vidInit>:
#define F_CPU 8000000
#include <util/delay.h>


void LCD_vidInit(void)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	e8 97       	sbiw	r28, 0x38	; 56
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
#if LCD_MODE == LCD_8BITMODE
	DIO_vidSetPortDirection(Data_Port    , 0XFF);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	6f ef       	ldi	r22, 0xFF	; 255
    155c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <DIO_vidSetPortDirection>
	DIO_vidSetPinDirection (Control_Port , RS , 1);  //RS
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	41 e0       	ldi	r20, 0x01	; 1
    1566:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection (Control_Port , RW , 1);  //RW
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection (Control_Port , EN , 1);	//EN
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_vidSetPinDirection>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e2       	ldi	r26, 0x20	; 32
    1584:	b2 e4       	ldi	r27, 0x42	; 66
    1586:	8d ab       	std	Y+53, r24	; 0x35
    1588:	9e ab       	std	Y+54, r25	; 0x36
    158a:	af ab       	std	Y+55, r26	; 0x37
    158c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	6d a9       	ldd	r22, Y+53	; 0x35
    1590:	7e a9       	ldd	r23, Y+54	; 0x36
    1592:	8f a9       	ldd	r24, Y+55	; 0x37
    1594:	98 ad       	ldd	r25, Y+56	; 0x38
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	89 ab       	std	Y+49, r24	; 0x31
    15a8:	9a ab       	std	Y+50, r25	; 0x32
    15aa:	ab ab       	std	Y+51, r26	; 0x33
    15ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ae:	69 a9       	ldd	r22, Y+49	; 0x31
    15b0:	7a a9       	ldd	r23, Y+50	; 0x32
    15b2:	8b a9       	ldd	r24, Y+51	; 0x33
    15b4:	9c a9       	ldd	r25, Y+52	; 0x34
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <LCD_vidInit+0x8c>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	98 ab       	std	Y+48, r25	; 0x30
    15cc:	8f a7       	std	Y+47, r24	; 0x2f
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <LCD_vidInit+0x10a>
	else if (__tmp > 65535)
    15d0:	69 a9       	ldd	r22, Y+49	; 0x31
    15d2:	7a a9       	ldd	r23, Y+50	; 0x32
    15d4:	8b a9       	ldd	r24, Y+51	; 0x33
    15d6:	9c a9       	ldd	r25, Y+52	; 0x34
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	4c f5       	brge	.+82     	; 0x163a <LCD_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	6d a9       	ldd	r22, Y+53	; 0x35
    15ea:	7e a9       	ldd	r23, Y+54	; 0x36
    15ec:	8f a9       	ldd	r24, Y+55	; 0x37
    15ee:	98 ad       	ldd	r25, Y+56	; 0x38
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	98 ab       	std	Y+48, r25	; 0x30
    160e:	8f a7       	std	Y+47, r24	; 0x2f
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <LCD_vidInit+0xec>
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9e a7       	std	Y+46, r25	; 0x2e
    1618:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    161a:	8d a5       	ldd	r24, Y+45	; 0x2d
    161c:	9e a5       	ldd	r25, Y+46	; 0x2e
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <LCD_vidInit+0xda>
    1622:	9e a7       	std	Y+46, r25	; 0x2e
    1624:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	8f a5       	ldd	r24, Y+47	; 0x2f
    1628:	98 a9       	ldd	r25, Y+48	; 0x30
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	98 ab       	std	Y+48, r25	; 0x30
    162e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	8f a5       	ldd	r24, Y+47	; 0x2f
    1632:	98 a9       	ldd	r25, Y+48	; 0x30
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	69 f7       	brne	.-38     	; 0x1612 <LCD_vidInit+0xce>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <LCD_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	69 a9       	ldd	r22, Y+49	; 0x31
    163c:	7a a9       	ldd	r23, Y+50	; 0x32
    163e:	8b a9       	ldd	r24, Y+51	; 0x33
    1640:	9c a9       	ldd	r25, Y+52	; 0x34
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	98 ab       	std	Y+48, r25	; 0x30
    164c:	8f a7       	std	Y+47, r24	; 0x2f
    164e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1650:	98 a9       	ldd	r25, Y+48	; 0x30
    1652:	9c a7       	std	Y+44, r25	; 0x2c
    1654:	8b a7       	std	Y+43, r24	; 0x2b
    1656:	8b a5       	ldd	r24, Y+43	; 0x2b
    1658:	9c a5       	ldd	r25, Y+44	; 0x2c
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_vidInit+0x116>
    165e:	9c a7       	std	Y+44, r25	; 0x2c
    1660:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);

	LCD_vidSendCommand( FUNCTION_SET   );
    1662:	88 e3       	ldi	r24, 0x38	; 56
    1664:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e8       	ldi	r26, 0x80	; 128
    166e:	bf e3       	ldi	r27, 0x3F	; 63
    1670:	8f a3       	std	Y+39, r24	; 0x27
    1672:	98 a7       	std	Y+40, r25	; 0x28
    1674:	a9 a7       	std	Y+41, r26	; 0x29
    1676:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	6f a1       	ldd	r22, Y+39	; 0x27
    167a:	78 a5       	ldd	r23, Y+40	; 0x28
    167c:	89 a5       	ldd	r24, Y+41	; 0x29
    167e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a ef       	ldi	r20, 0xFA	; 250
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8b a3       	std	Y+35, r24	; 0x23
    1692:	9c a3       	std	Y+36, r25	; 0x24
    1694:	ad a3       	std	Y+37, r26	; 0x25
    1696:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1698:	6b a1       	ldd	r22, Y+35	; 0x23
    169a:	7c a1       	ldd	r23, Y+36	; 0x24
    169c:	8d a1       	ldd	r24, Y+37	; 0x25
    169e:	9e a1       	ldd	r25, Y+38	; 0x26
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_vidInit+0x176>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9a a3       	std	Y+34, r25	; 0x22
    16b6:	89 a3       	std	Y+33, r24	; 0x21
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <LCD_vidInit+0x1f4>
	else if (__tmp > 65535)
    16ba:	6b a1       	ldd	r22, Y+35	; 0x23
    16bc:	7c a1       	ldd	r23, Y+36	; 0x24
    16be:	8d a1       	ldd	r24, Y+37	; 0x25
    16c0:	9e a1       	ldd	r25, Y+38	; 0x26
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	4c f5       	brge	.+82     	; 0x1724 <LCD_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	6f a1       	ldd	r22, Y+39	; 0x27
    16d4:	78 a5       	ldd	r23, Y+40	; 0x28
    16d6:	89 a5       	ldd	r24, Y+41	; 0x29
    16d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9a a3       	std	Y+34, r25	; 0x22
    16f8:	89 a3       	std	Y+33, r24	; 0x21
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <LCD_vidInit+0x1d6>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	98 a3       	std	Y+32, r25	; 0x20
    1702:	8f 8f       	std	Y+31, r24	; 0x1f
    1704:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1706:	98 a1       	ldd	r25, Y+32	; 0x20
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_vidInit+0x1c4>
    170c:	98 a3       	std	Y+32, r25	; 0x20
    170e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	89 a1       	ldd	r24, Y+33	; 0x21
    1712:	9a a1       	ldd	r25, Y+34	; 0x22
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9a a3       	std	Y+34, r25	; 0x22
    1718:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	89 a1       	ldd	r24, Y+33	; 0x21
    171c:	9a a1       	ldd	r25, Y+34	; 0x22
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <LCD_vidInit+0x1b8>
    1722:	14 c0       	rjmp	.+40     	; 0x174c <LCD_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	6b a1       	ldd	r22, Y+35	; 0x23
    1726:	7c a1       	ldd	r23, Y+36	; 0x24
    1728:	8d a1       	ldd	r24, Y+37	; 0x25
    172a:	9e a1       	ldd	r25, Y+38	; 0x26
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9a a3       	std	Y+34, r25	; 0x22
    1736:	89 a3       	std	Y+33, r24	; 0x21
    1738:	89 a1       	ldd	r24, Y+33	; 0x21
    173a:	9a a1       	ldd	r25, Y+34	; 0x22
    173c:	9e 8f       	std	Y+30, r25	; 0x1e
    173e:	8d 8f       	std	Y+29, r24	; 0x1d
    1740:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1742:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_vidInit+0x200>
    1748:	9e 8f       	std	Y+30, r25	; 0x1e
    174a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_vidSendCommand( DISPLAY_ON_LCD );
    174c:	8c e0       	ldi	r24, 0x0C	; 12
    174e:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e8       	ldi	r26, 0x80	; 128
    1758:	bf e3       	ldi	r27, 0x3F	; 63
    175a:	89 8f       	std	Y+25, r24	; 0x19
    175c:	9a 8f       	std	Y+26, r25	; 0x1a
    175e:	ab 8f       	std	Y+27, r26	; 0x1b
    1760:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	69 8d       	ldd	r22, Y+25	; 0x19
    1764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a ef       	ldi	r20, 0xFA	; 250
    1770:	54 e4       	ldi	r21, 0x44	; 68
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8d 8b       	std	Y+21, r24	; 0x15
    177c:	9e 8b       	std	Y+22, r25	; 0x16
    177e:	af 8b       	std	Y+23, r26	; 0x17
    1780:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1782:	6d 89       	ldd	r22, Y+21	; 0x15
    1784:	7e 89       	ldd	r23, Y+22	; 0x16
    1786:	8f 89       	ldd	r24, Y+23	; 0x17
    1788:	98 8d       	ldd	r25, Y+24	; 0x18
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <LCD_vidInit+0x260>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <LCD_vidInit+0x2de>
	else if (__tmp > 65535)
    17a4:	6d 89       	ldd	r22, Y+21	; 0x15
    17a6:	7e 89       	ldd	r23, Y+22	; 0x16
    17a8:	8f 89       	ldd	r24, Y+23	; 0x17
    17aa:	98 8d       	ldd	r25, Y+24	; 0x18
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <LCD_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	69 8d       	ldd	r22, Y+25	; 0x19
    17be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9c 8b       	std	Y+20, r25	; 0x14
    17e2:	8b 8b       	std	Y+19, r24	; 0x13
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <LCD_vidInit+0x2c0>
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9a 8b       	std	Y+18, r25	; 0x12
    17ec:	89 8b       	std	Y+17, r24	; 0x11
    17ee:	89 89       	ldd	r24, Y+17	; 0x11
    17f0:	9a 89       	ldd	r25, Y+18	; 0x12
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <LCD_vidInit+0x2ae>
    17f6:	9a 8b       	std	Y+18, r25	; 0x12
    17f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8b 89       	ldd	r24, Y+19	; 0x13
    17fc:	9c 89       	ldd	r25, Y+20	; 0x14
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9c 8b       	std	Y+20, r25	; 0x14
    1802:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8b 89       	ldd	r24, Y+19	; 0x13
    1806:	9c 89       	ldd	r25, Y+20	; 0x14
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <LCD_vidInit+0x2a2>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <LCD_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	6d 89       	ldd	r22, Y+21	; 0x15
    1810:	7e 89       	ldd	r23, Y+22	; 0x16
    1812:	8f 89       	ldd	r24, Y+23	; 0x17
    1814:	98 8d       	ldd	r25, Y+24	; 0x18
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9c 8b       	std	Y+20, r25	; 0x14
    1820:	8b 8b       	std	Y+19, r24	; 0x13
    1822:	8b 89       	ldd	r24, Y+19	; 0x13
    1824:	9c 89       	ldd	r25, Y+20	; 0x14
    1826:	98 8b       	std	Y+16, r25	; 0x10
    1828:	8f 87       	std	Y+15, r24	; 0x0f
    182a:	8f 85       	ldd	r24, Y+15	; 0x0f
    182c:	98 89       	ldd	r25, Y+16	; 0x10
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_vidInit+0x2ea>
    1832:	98 8b       	std	Y+16, r25	; 0x10
    1834:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	LCD_vidSendCommand( CLEAR_DISPLAY  );
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 e8       	ldi	r26, 0x80	; 128
    1842:	bf e3       	ldi	r27, 0x3F	; 63
    1844:	8b 87       	std	Y+11, r24	; 0x0b
    1846:	9c 87       	std	Y+12, r25	; 0x0c
    1848:	ad 87       	std	Y+13, r26	; 0x0d
    184a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	6b 85       	ldd	r22, Y+11	; 0x0b
    184e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a ef       	ldi	r20, 0xFA	; 250
    185a:	54 e4       	ldi	r21, 0x44	; 68
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8f 83       	std	Y+7, r24	; 0x07
    1866:	98 87       	std	Y+8, r25	; 0x08
    1868:	a9 87       	std	Y+9, r26	; 0x09
    186a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <LCD_vidInit+0x34a>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	3f c0       	rjmp	.+126    	; 0x190c <LCD_vidInit+0x3c8>
	else if (__tmp > 65535)
    188e:	6f 81       	ldd	r22, Y+7	; 0x07
    1890:	78 85       	ldd	r23, Y+8	; 0x08
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <LCD_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <LCD_vidInit+0x3aa>
    18d0:	88 ec       	ldi	r24, 0xC8	; 200
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_vidInit+0x398>
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <LCD_vidInit+0x38c>
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <LCD_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	6f 81       	ldd	r22, Y+7	; 0x07
    18fa:	78 85       	ldd	r23, Y+8	; 0x08
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_vidInit+0x3d4>
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	89 83       	std	Y+1, r24	; 0x01
	//LCD_vidSendCommand( LCD_u8CMD_CLR_Display );   //Clear Display

	_delay_ms(1);
#endif

}
    1920:	e8 96       	adiw	r28, 0x38	; 56
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 Cmd)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	2f 97       	sbiw	r28, 0x0f	; 15
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == LCD_8BITMODE
	DIO_vidSetPinValue(Control_Port , RS , 0);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(Control_Port , RW , 0);
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>

	DIO_vidSetPortValue(Data_Port , Cmd);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1960:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_vidSetPortValue>

	DIO_vidSetPinValue(Control_Port , EN , 1);
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a0 ea       	ldi	r26, 0xA0	; 160
    1974:	b0 e4       	ldi	r27, 0x40	; 64
    1976:	8b 87       	std	Y+11, r24	; 0x0b
    1978:	9c 87       	std	Y+12, r25	; 0x0c
    197a:	ad 87       	std	Y+13, r26	; 0x0d
    197c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1980:	7c 85       	ldd	r23, Y+12	; 0x0c
    1982:	8d 85       	ldd	r24, Y+13	; 0x0d
    1984:	9e 85       	ldd	r25, Y+14	; 0x0e
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a ef       	ldi	r20, 0xFA	; 250
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8f 83       	std	Y+7, r24	; 0x07
    1998:	98 87       	std	Y+8, r25	; 0x08
    199a:	a9 87       	std	Y+9, r26	; 0x09
    199c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199e:	6f 81       	ldd	r22, Y+7	; 0x07
    19a0:	78 85       	ldd	r23, Y+8	; 0x08
    19a2:	89 85       	ldd	r24, Y+9	; 0x09
    19a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <LCD_vidSendCommand+0x8e>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
    19be:	3f c0       	rjmp	.+126    	; 0x1a3e <LCD_vidSendCommand+0x10c>
	else if (__tmp > 65535)
    19c0:	6f 81       	ldd	r22, Y+7	; 0x07
    19c2:	78 85       	ldd	r23, Y+8	; 0x08
    19c4:	89 85       	ldd	r24, Y+9	; 0x09
    19c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	4f e7       	ldi	r20, 0x7F	; 127
    19ce:	57 e4       	ldi	r21, 0x47	; 71
    19d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d4:	18 16       	cp	r1, r24
    19d6:	4c f5       	brge	.+82     	; 0x1a2a <LCD_vidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	51 e4       	ldi	r21, 0x41	; 65
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9e 83       	std	Y+6, r25	; 0x06
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	0f c0       	rjmp	.+30     	; 0x1a20 <LCD_vidSendCommand+0xee>
    1a02:	88 ec       	ldi	r24, 0xC8	; 200
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 83       	std	Y+4, r25	; 0x04
    1a08:	8b 83       	std	Y+3, r24	; 0x03
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_vidSendCommand+0xdc>
    1a12:	9c 83       	std	Y+4, r25	; 0x04
    1a14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a20:	8d 81       	ldd	r24, Y+5	; 0x05
    1a22:	9e 81       	ldd	r25, Y+6	; 0x06
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	69 f7       	brne	.-38     	; 0x1a02 <LCD_vidSendCommand+0xd0>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <LCD_vidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	89 83       	std	Y+1, r24	; 0x01
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <LCD_vidSendCommand+0x118>
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

	DIO_vidSetPinValue(Control_Port , EN , 0);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>

	DIO_vidSetPinValue(Control_Port , EN , 1);  //Disable Receiving data from port
	_delay_ms(5);
	DIO_vidSetPinValue(Control_Port , EN , 0);	//Receive  data and save in buffer
#endif
}
    1a5c:	2f 96       	adiw	r28, 0x0f	; 15
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <LCD_vidSendData>:

void LCD_vidSendData(u8 Char)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	2f 97       	sbiw	r28, 0x0f	; 15
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	8f 87       	std	Y+15, r24	; 0x0f
#if LCD_MODE == LCD_8BITMODE
	DIO_vidSetPinValue(Control_Port , RS , 1);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(Control_Port , RW , 0);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>

	DIO_vidSetPortValue(Data_Port , Char);
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a9c:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_vidSetPortValue>

	DIO_vidSetPinValue(Control_Port , EN , 1);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	62 e0       	ldi	r22, 0x02	; 2
    1aa4:	41 e0       	ldi	r20, 0x01	; 1
    1aa6:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 ea       	ldi	r26, 0xA0	; 160
    1ab0:	b0 e4       	ldi	r27, 0x40	; 64
    1ab2:	8b 87       	std	Y+11, r24	; 0x0b
    1ab4:	9c 87       	std	Y+12, r25	; 0x0c
    1ab6:	ad 87       	std	Y+13, r26	; 0x0d
    1ab8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1abc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a ef       	ldi	r20, 0xFA	; 250
    1ac8:	54 e4       	ldi	r21, 0x44	; 68
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	8f 83       	std	Y+7, r24	; 0x07
    1ad4:	98 87       	std	Y+8, r25	; 0x08
    1ad6:	a9 87       	std	Y+9, r26	; 0x09
    1ad8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aee:	88 23       	and	r24, r24
    1af0:	2c f4       	brge	.+10     	; 0x1afc <LCD_vidSendData+0x8e>
		__ticks = 1;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <LCD_vidSendData+0x10c>
	else if (__tmp > 65535)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	3f ef       	ldi	r19, 0xFF	; 255
    1b08:	4f e7       	ldi	r20, 0x7F	; 127
    1b0a:	57 e4       	ldi	r21, 0x47	; 71
    1b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b10:	18 16       	cp	r1, r24
    1b12:	4c f5       	brge	.+82     	; 0x1b66 <LCD_vidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <LCD_vidSendData+0xee>
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_vidSendData+0xdc>
    1b4e:	9c 83       	std	Y+4, r25	; 0x04
    1b50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <LCD_vidSendData+0xd0>
    1b64:	14 c0       	rjmp	.+40     	; 0x1b8e <LCD_vidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	9a 83       	std	Y+2, r25	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	9a 81       	ldd	r25, Y+2	; 0x02
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_vidSendData+0x118>
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);

	DIO_vidSetPinValue(Control_Port , EN , 0);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	62 e0       	ldi	r22, 0x02	; 2
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_vidSetPinValue>
	DIO_vidSetPinValue(Control_Port , EN , 1);  //Disable Receiving data from port
	_delay_ms(5);
	DIO_vidSetPinValue(Control_Port , EN , 0);	//Receive  data and save in buffer
#endif

}
    1b98:	2f 96       	adiw	r28, 0x0f	; 15
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <LCD_vidSendString>:

void LCD_vidSendString(u8 * Str)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <LCD_vidSendString+0x6>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	9b 83       	std	Y+3, r25	; 0x03
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	0e c0       	rjmp	.+28     	; 0x1bda <LCD_vidSendString+0x30>
	while(Str[i] !=  '\0' )
	{
		LCD_vidSendData(Str[i]);
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e2 0f       	add	r30, r18
    1bcc:	f3 1f       	adc	r31, r19
    1bce:	80 81       	ld	r24, Z
    1bd0:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <LCD_vidSendData>
		i++;
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_vidSendString(u8 * Str)
{
	u8 i =0;
	while(Str[i] !=  '\0' )
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	9b 81       	ldd	r25, Y+3	; 0x03
    1be4:	fc 01       	movw	r30, r24
    1be6:	e2 0f       	add	r30, r18
    1be8:	f3 1f       	adc	r31, r19
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	39 f7       	brne	.-50     	; 0x1bbe <LCD_vidSendString+0x14>
	{
		LCD_vidSendData(Str[i]);
		i++;
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <LCD_vidWriteNumber>:

void LCD_vidWriteNumber(u16 Number)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <LCD_vidWriteNumber+0x6>
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <LCD_vidWriteNumber+0x8>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
	u16 Rev = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		Rev    = (Rev * 10) + (Number % 10);
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	9a 81       	ldd	r25, Y+2	; 0x02
    1c18:	9c 01       	movw	r18, r24
    1c1a:	22 0f       	add	r18, r18
    1c1c:	33 1f       	adc	r19, r19
    1c1e:	c9 01       	movw	r24, r18
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	f9 01       	movw	r30, r18
    1c2a:	e8 0f       	add	r30, r24
    1c2c:	f9 1f       	adc	r31, r25
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	2a e0       	ldi	r18, 0x0A	; 10
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	b9 01       	movw	r22, r18
    1c38:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    1c3c:	8e 0f       	add	r24, r30
    1c3e:	9f 1f       	adc	r25, r31
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
		Number =  Number / 10;
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	2a e0       	ldi	r18, 0x0A	; 10
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	b9 01       	movw	r22, r18
    1c4e:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    1c52:	cb 01       	movw	r24, r22
    1c54:	9c 83       	std	Y+4, r25	; 0x04
    1c56:	8b 83       	std	Y+3, r24	; 0x03

	}while(Number != 0);
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	00 97       	sbiw	r24, 0x00	; 0
    1c5e:	d1 f6       	brne	.-76     	; 0x1c14 <LCD_vidWriteNumber+0x18>
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <LCD_vidWriteNumber+0x8e>


	while( (Rev / 10) != 0)
	{
		LCD_vidSendData((Rev % 10) + '0');
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	2a e0       	ldi	r18, 0x0A	; 10
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	b9 01       	movw	r22, r18
    1c6c:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    1c70:	80 5d       	subi	r24, 0xD0	; 208
    1c72:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <LCD_vidSendData>
		Rev = Rev / 10 ;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	2a e0       	ldi	r18, 0x0A	; 10
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	b9 01       	movw	r22, r18
    1c80:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivmodhi4>
    1c84:	cb 01       	movw	r24, r22
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
		Number =  Number / 10;

	}while(Number != 0);


	while( (Rev / 10) != 0)
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	8a 30       	cpi	r24, 0x0A	; 10
    1c90:	91 05       	cpc	r25, r1
    1c92:	38 f7       	brcc	.-50     	; 0x1c62 <LCD_vidWriteNumber+0x66>
	{
		LCD_vidSendData((Rev % 10) + '0');
		Rev = Rev / 10 ;
	}

}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <LCD_vidSavePattern>:

void LCD_vidSavePattern(u8 *Pattern , u8 Pattern_Adress)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <LCD_vidSavePattern+0x6>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <LCD_vidSavePattern+0x8>
    1caa:	0f 92       	push	r0
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
    1cb4:	6d 83       	std	Y+5, r22	; 0x05
	u8 CGRAM_Adress;

	if(Pattern_Adress < 8)
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	88 30       	cpi	r24, 0x08	; 8
    1cba:	18 f5       	brcc	.+70     	; 0x1d02 <LCD_vidSavePattern+0x60>
	{
		CGRAM_Adress = Pattern_Adress * 8;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(CGRAM_Adress , 6);          //Move AC To CGRAM
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	80 64       	ori	r24, 0x40	; 64
    1cd4:	8a 83       	std	Y+2, r24	; 0x02
		LCD_vidSendCommand(CGRAM_Adress);
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>

		for(u8 i=0; i<8; i++)
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <LCD_vidSavePattern+0x5a>
		{
			LCD_vidSendData(Pattern[i]);
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	fc 01       	movw	r30, r24
    1cec:	e2 0f       	add	r30, r18
    1cee:	f3 1f       	adc	r31, r19
    1cf0:	80 81       	ld	r24, Z
    1cf2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <LCD_vidSendData>
		CGRAM_Adress = Pattern_Adress * 8;

		SET_BIT(CGRAM_Adress , 6);          //Move AC To CGRAM
		LCD_vidSendCommand(CGRAM_Adress);

		for(u8 i=0; i<8; i++)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	88 30       	cpi	r24, 0x08	; 8
    1d00:	78 f3       	brcs	.-34     	; 0x1ce0 <LCD_vidSavePattern+0x3e>
			LCD_vidSendData(Pattern[i]);
		}
	}

	//LCD_vidSendCommand(LCD_u8CMD_RETURN_AC);    //Move AC to DDRAM
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <LCDC_vidClearScreen>:

void LCDC_vidClearScreen(void)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e8       	ldi	r26, 0x80	; 128
    1d2c:	bf e3       	ldi	r27, 0x3F	; 63
    1d2e:	8b 87       	std	Y+11, r24	; 0x0b
    1d30:	9c 87       	std	Y+12, r25	; 0x0c
    1d32:	ad 87       	std	Y+13, r26	; 0x0d
    1d34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	4a ef       	ldi	r20, 0xFA	; 250
    1d44:	54 e4       	ldi	r21, 0x44	; 68
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8f 83       	std	Y+7, r24	; 0x07
    1d50:	98 87       	std	Y+8, r25	; 0x08
    1d52:	a9 87       	std	Y+9, r26	; 0x09
    1d54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e8       	ldi	r20, 0x80	; 128
    1d64:	5f e3       	ldi	r21, 0x3F	; 63
    1d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6a:	88 23       	and	r24, r24
    1d6c:	2c f4       	brge	.+10     	; 0x1d78 <LCDC_vidClearScreen+0x66>
		__ticks = 1;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <LCDC_vidClearScreen+0xe4>
	else if (__tmp > 65535)
    1d78:	6f 81       	ldd	r22, Y+7	; 0x07
    1d7a:	78 85       	ldd	r23, Y+8	; 0x08
    1d7c:	89 85       	ldd	r24, Y+9	; 0x09
    1d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	3f ef       	ldi	r19, 0xFF	; 255
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	57 e4       	ldi	r21, 0x47	; 71
    1d88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	4c f5       	brge	.+82     	; 0x1de2 <LCDC_vidClearScreen+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	40 e2       	ldi	r20, 0x20	; 32
    1d9e:	51 e4       	ldi	r21, 0x41	; 65
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <LCDC_vidClearScreen+0xc6>
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 83       	std	Y+4, r25	; 0x04
    1dc0:	8b 83       	std	Y+3, r24	; 0x03
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCDC_vidClearScreen+0xb4>
    1dca:	9c 83       	std	Y+4, r25	; 0x04
    1dcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	69 f7       	brne	.-38     	; 0x1dba <LCDC_vidClearScreen+0xa8>
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <LCDC_vidClearScreen+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9e 83       	std	Y+6, r25	; 0x06
    1df4:	8d 83       	std	Y+5, r24	; 0x05
    1df6:	8d 81       	ldd	r24, Y+5	; 0x05
    1df8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dfa:	9a 83       	std	Y+2, r25	; 0x02
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	9a 81       	ldd	r25, Y+2	; 0x02
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCDC_vidClearScreen+0xf0>
    1e06:	9a 83       	std	Y+2, r25	; 0x02
    1e08:	89 83       	std	Y+1, r24	; 0x01
	//LCD_vidSendCommand( LCD_u8CMD_CLR_Display  );
	_delay_ms(1);
}
    1e0a:	2e 96       	adiw	r28, 0x0e	; 14
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <Lcd_vidSetPosition>:

void Lcd_vidSetPosition(u8 Row , u8 Col)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <Lcd_vidSetPosition+0x6>
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	6a 83       	std	Y+2, r22	; 0x02
	if(Row == 0)
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	88 23       	and	r24, r24
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <Lcd_vidSetPosition+0x1e>
	{
		LCD_vidSendCommand(128 + Col);
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	80 58       	subi	r24, 0x80	; 128
    1e34:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
    1e38:	07 c0       	rjmp	.+14     	; 0x1e48 <Lcd_vidSetPosition+0x2c>
	}
	else if(Row == 1)
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	81 30       	cpi	r24, 0x01	; 1
    1e3e:	21 f4       	brne	.+8      	; 0x1e48 <Lcd_vidSetPosition+0x2c>
	{
		LCD_vidSendCommand(128 + 64 + Col);
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	80 54       	subi	r24, 0x40	; 64
    1e44:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
	}
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <Timer0_vidInit>:
static void(*Pfun_OVF)(void);
static void(*Pfun_CMP)(void);


void Timer0_vidInit(void)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_u8PRESCALLER_VALU == TIMER0_u8FCPU_64
	//Select Pre_scaller with 64
	TCCR0 = 3;
#elif TIMER0_u8PRESCALLER_VALU == TIMER0_u8FCPU_256
	//Select Pre_scaller with 256
	TCCR0 = 4;
    1e5a:	e3 e5       	ldi	r30, 0x53	; 83
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	84 e0       	ldi	r24, 0x04	; 4
    1e60:	80 83       	st	Z, r24
#endif


#if TIMER0_u8WFG_MODE == TIMER0_u8NORMAL_MODE
	//Select Normal Mode
	CLR_BIT(TCCR0 , WGM00);
    1e62:	a3 e5       	ldi	r26, 0x53	; 83
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e3 e5       	ldi	r30, 0x53	; 83
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8f 7b       	andi	r24, 0xBF	; 191
    1e6e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , WGM01);
    1e70:	a3 e5       	ldi	r26, 0x53	; 83
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e3 e5       	ldi	r30, 0x53	; 83
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	87 7f       	andi	r24, 0xF7	; 247
    1e7c:	8c 93       	st	X, r24
	//PIE of TIMER0 at overflow of counter register
	SET_BIT(TIMSK , TOIE0);
    1e7e:	a9 e5       	ldi	r26, 0x59	; 89
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e9 e5       	ldi	r30, 0x59	; 89
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	81 60       	ori	r24, 0x01	; 1
    1e8a:	8c 93       	st	X, r24
	//Initial TCNT0 Register
	TCNT0 = TIMER0_u8PRELOAD;
    1e8c:	e2 e5       	ldi	r30, 0x52	; 82
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	10 82       	st	Z, r1
#endif


#if TIMER0_u8COMPARE_MATCH_OUTPUT_MODE == TIMER0_u8OC0_DISCONNECTED
	//Select OCR0 disconnected (NO_COMPARE_MATCH)
	CLR_BIT(TCCR0 , COM00);
    1e92:	a3 e5       	ldi	r26, 0x53	; 83
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e3 e5       	ldi	r30, 0x53	; 83
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8f 7e       	andi	r24, 0xEF	; 239
    1e9e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , COM01);
    1ea0:	a3 e5       	ldi	r26, 0x53	; 83
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e3 e5       	ldi	r30, 0x53	; 83
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	8f 7d       	andi	r24, 0xDF	; 223
    1eac:	8c 93       	st	X, r24
	//Select set output at OCR0 compare match value and clear at register overflow
	SET_BIT(TCCR0 , COM00);
	SET_BIT(TCCR0 , COM01);
#endif

}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <GIE_vidEnable>:

void GIE_vidEnable(void)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG ,7);
    1ebc:	af e5       	ldi	r26, 0x5F	; 95
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	ef e5       	ldi	r30, 0x5F	; 95
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 68       	ori	r24, 0x80	; 128
    1ec8:	8c 93       	st	X, r24
}
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <GIE_vidDisable>:

void GIE_vidDisable(void)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG ,7);
    1ed8:	af e5       	ldi	r26, 0x5F	; 95
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	ef e5       	ldi	r30, 0x5F	; 95
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8f 77       	andi	r24, 0x7F	; 127
    1ee4:	8c 93       	st	X, r24
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <Timer0_vidSetCompareRegisterValue>:

void Timer0_vidSetCompareRegisterValue(u8 Val)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	0f 92       	push	r0
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
    1ef6:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Val;
    1ef8:	ec e5       	ldi	r30, 0x5C	; 92
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	80 83       	st	Z, r24
}
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <Timer0_vidDutyCycle>:

void Timer0_vidDutyCycle(u8 Duty)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Timer0_vidDutyCycle+0x6>
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Val = (256 * Duty) /100 ;
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	88 27       	eor	r24, r24
    1f1e:	24 e6       	ldi	r18, 0x64	; 100
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	b9 01       	movw	r22, r18
    1f24:	0e 94 1d 12 	call	0x243a	; 0x243a <__divmodhi4>
    1f28:	cb 01       	movw	r24, r22
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Val;
    1f2c:	ec e5       	ldi	r30, 0x5C	; 92
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	80 83       	st	Z, r24
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <Timer0_u8GetCounterRegistr>:



u8   Timer0_u8GetCounterRegistr(void)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1f46:	e2 e5       	ldi	r30, 0x52	; 82
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
}
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <Timer0_u8SetCounterRegistr>:
void Timer0_u8SetCounterRegistr(u8 Val)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	0f 92       	push	r0
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0   =  Val;
    1f5e:	e2 e5       	ldi	r30, 0x52	; 82
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	80 83       	st	Z, r24
}
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <CMP_vidSetCB>:

void CMP_vidSetCB(void(*pf)(void))
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <CMP_vidSetCB+0x6>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	Pfun_CMP = pf;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	90 93 8b 01 	sts	0x018B, r25
    1f84:	80 93 8a 01 	sts	0x018A, r24
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <OVF_vidSetCB>:


void OVF_vidSetCB(void(*pf)(void))
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <OVF_vidSetCB+0x6>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	Pfun_OVF = pf;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	90 93 89 01 	sts	0x0189, r25
    1fa8:	80 93 88 01 	sts	0x0188, r24
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <__vector_10>:


void __vector_10 (void)
{
    1fb6:	1f 92       	push	r1
    1fb8:	0f 92       	push	r0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	0f 92       	push	r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	2f 93       	push	r18
    1fc2:	3f 93       	push	r19
    1fc4:	4f 93       	push	r20
    1fc6:	5f 93       	push	r21
    1fc8:	6f 93       	push	r22
    1fca:	7f 93       	push	r23
    1fcc:	8f 93       	push	r24
    1fce:	9f 93       	push	r25
    1fd0:	af 93       	push	r26
    1fd2:	bf 93       	push	r27
    1fd4:	ef 93       	push	r30
    1fd6:	ff 93       	push	r31
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
	Pfun_CMP();
    1fe0:	e0 91 8a 01 	lds	r30, 0x018A
    1fe4:	f0 91 8b 01 	lds	r31, 0x018B
    1fe8:	09 95       	icall
}
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	7f 91       	pop	r23
    1ffc:	6f 91       	pop	r22
    1ffe:	5f 91       	pop	r21
    2000:	4f 91       	pop	r20
    2002:	3f 91       	pop	r19
    2004:	2f 91       	pop	r18
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <__vector_11>:

void __vector_11 (void)
{
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	0f 92       	push	r0
    2018:	11 24       	eor	r1, r1
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	4f 93       	push	r20
    2020:	5f 93       	push	r21
    2022:	6f 93       	push	r22
    2024:	7f 93       	push	r23
    2026:	8f 93       	push	r24
    2028:	9f 93       	push	r25
    202a:	af 93       	push	r26
    202c:	bf 93       	push	r27
    202e:	ef 93       	push	r30
    2030:	ff 93       	push	r31
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
	Pfun_OVF();
    203a:	e0 91 88 01 	lds	r30, 0x0188
    203e:	f0 91 89 01 	lds	r31, 0x0189
    2042:	09 95       	icall
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	ff 91       	pop	r31
    204a:	ef 91       	pop	r30
    204c:	bf 91       	pop	r27
    204e:	af 91       	pop	r26
    2050:	9f 91       	pop	r25
    2052:	8f 91       	pop	r24
    2054:	7f 91       	pop	r23
    2056:	6f 91       	pop	r22
    2058:	5f 91       	pop	r21
    205a:	4f 91       	pop	r20
    205c:	3f 91       	pop	r19
    205e:	2f 91       	pop	r18
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <Timer1_vidInit>:
#include "Timer1_Config.h"
#include "Timer1_Private.h"


void Timer1_vidInit(void)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A , WGM11);
	SET_BIT(TCCR1B , WGM12);
	SET_BIT(TCCR1B , WGM13);

#elif TIMER1_u8WFG_MODE == TIMER1_u8FAST_PWM_MODE_TOP_ICR1_OVTOP
	CLR_BIT(TCCR1A , WGM10);
    2072:	af e4       	ldi	r26, 0x4F	; 79
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ef e4       	ldi	r30, 0x4F	; 79
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8e 7f       	andi	r24, 0xFE	; 254
    207e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , WGM11);
    2080:	af e4       	ldi	r26, 0x4F	; 79
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	ef e4       	ldi	r30, 0x4F	; 79
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	82 60       	ori	r24, 0x02	; 2
    208c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM12);
    208e:	ae e4       	ldi	r26, 0x4E	; 78
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ee e4       	ldi	r30, 0x4E	; 78
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	88 60       	ori	r24, 0x08	; 8
    209a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B , WGM13);
    209c:	ae e4       	ldi	r26, 0x4E	; 78
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ee e4       	ldi	r30, 0x4E	; 78
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 61       	ori	r24, 0x10	; 16
    20a8:	8c 93       	st	X, r24

	ICR1 = TIMER1_u16INPUT_CAPTURE_VALUE;
    20aa:	e6 e4       	ldi	r30, 0x46	; 70
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	88 eb       	ldi	r24, 0xB8	; 184
    20b0:	9b e0       	ldi	r25, 0x0B	; 11
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
	CLR_BIT(TCCR1B , 2);
	SET_BIT(TCCR1B , 1);
	SET_BIT(TCCR1B , 0);
#elif TIMER1_u8PRESCALLER_VALU == TIMER1_u8FCPU_256
	//Select Pre_scaller with 256
	SET_BIT(TCCR1B , 2);
    20b6:	ae e4       	ldi	r26, 0x4E	; 78
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	ee e4       	ldi	r30, 0x4E	; 78
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	80 81       	ld	r24, Z
    20c0:	84 60       	ori	r24, 0x04	; 4
    20c2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , 1);
    20c4:	ae e4       	ldi	r26, 0x4E	; 78
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	ee e4       	ldi	r30, 0x4E	; 78
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	8d 7f       	andi	r24, 0xFD	; 253
    20d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B , 0);
    20d2:	ae e4       	ldi	r26, 0x4E	; 78
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ee e4       	ldi	r30, 0x4E	; 78
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8e 7f       	andi	r24, 0xFE	; 254
    20de:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A , COM1A1);
	OCR1A = TIMER1_u16COMPARE_VALUE_CHANNELA;


#elif TIMER1_u8CHANNELA_COM == TIMER1_u8CLEAR_OC1_ON_CM_SET_ON_TOP
	CLR_BIT(TCCR1A , COM1A0);
    20e0:	af e4       	ldi	r26, 0x4F	; 79
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	ef e4       	ldi	r30, 0x4F	; 79
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	8f 7b       	andi	r24, 0xBF	; 191
    20ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , COM1A1);
    20ee:	af e4       	ldi	r26, 0x4F	; 79
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ef e4       	ldi	r30, 0x4F	; 79
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	8c 93       	st	X, r24
	OCR1A = TIMER1_u16COMPARE_VALUE_CHANNELA;
    20fc:	ea e4       	ldi	r30, 0x4A	; 74
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	88 ee       	ldi	r24, 0xE8	; 232
    2102:	93 e0       	ldi	r25, 0x03	; 3
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
	SET_BIT(TCCR1B , COM1B0);
	SET_BIT(TCCR1B , COM1B1);
	OCR1B = TIMER1_u16COMPARE_VALUE_CHANNELB;
#endif

}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <Timer1_vidDuttyCycleChannelA>:
{
	CLR_BIT(SREG ,7);
}*/

void Timer1_vidDuttyCycleChannelA(u16 Val)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <Timer1_vidDuttyCycleChannelA+0x6>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Val;
    211c:	ea e4       	ldi	r30, 0x4A	; 74
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <Timer1_vidDuttyCycleChannelB>:

void Timer1_vidDuttyCycleChannelB(u16 Val)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <Timer1_vidDuttyCycleChannelB+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Val;
    2140:	e8 e4       	ldi	r30, 0x48	; 72
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <main>:

f32 DutyCycle   = 0;
f32 Frequency   = 0;

int main(void)
{
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	Timer1_vidInit();
    2166:	0e 94 35 10 	call	0x206a	; 0x206a <Timer1_vidInit>
	INT_vidInit();
    216a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <INT_vidInit>
	LCD_vidInit();
    216e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_vidInit>
	DIO_vidSetPinDirection( PortD , PIN_5  , 1);
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	65 e0       	ldi	r22, 0x05	; 5
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_vidSetPinDirection>
	DIO_vidSetPinDirection( PortD , PIN_2  , 0);
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	62 e0       	ldi	r22, 0x02	; 2
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_vidSetPinDirection>
	GIE_vidEnable();
    2186:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <GIE_vidEnable>

	OVF_vidSetCB(App_vidOverFlowCounter);
    218a:	8f e6       	ldi	r24, 0x6F	; 111
    218c:	91 e1       	ldi	r25, 0x11	; 17
    218e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <OVF_vidSetCB>
	INT0_vidSetCB(App_vidDetectEdge);
    2192:	8b e7       	ldi	r24, 0x7B	; 123
    2194:	91 e1       	ldi	r25, 0x11	; 17
    2196:	0e 94 24 0a 	call	0x1448	; 0x1448 <INT0_vidSetCB>

	while(1)
	{
		if( 1 == Time_Flag)
    219a:	80 91 8d 01 	lds	r24, 0x018D
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	e1 f7       	brne	.-8      	; 0x219a <main+0x44>
		{
			DutyCycle = (TON * 100  / (TON + TOFF));
    21a2:	80 91 8f 01 	lds	r24, 0x018F
    21a6:	90 91 90 01 	lds	r25, 0x0190
    21aa:	a0 91 91 01 	lds	r26, 0x0191
    21ae:	b0 91 92 01 	lds	r27, 0x0192
    21b2:	24 e6       	ldi	r18, 0x64	; 100
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__mulsi3>
    21c2:	7b 01       	movw	r14, r22
    21c4:	8c 01       	movw	r16, r24
    21c6:	20 91 8f 01 	lds	r18, 0x018F
    21ca:	30 91 90 01 	lds	r19, 0x0190
    21ce:	40 91 91 01 	lds	r20, 0x0191
    21d2:	50 91 92 01 	lds	r21, 0x0192
    21d6:	80 91 93 01 	lds	r24, 0x0193
    21da:	90 91 94 01 	lds	r25, 0x0194
    21de:	a0 91 95 01 	lds	r26, 0x0195
    21e2:	b0 91 96 01 	lds	r27, 0x0196
    21e6:	28 0f       	add	r18, r24
    21e8:	39 1f       	adc	r19, r25
    21ea:	4a 1f       	adc	r20, r26
    21ec:	5b 1f       	adc	r21, r27
    21ee:	c8 01       	movw	r24, r16
    21f0:	b7 01       	movw	r22, r14
    21f2:	0e 94 30 12 	call	0x2460	; 0x2460 <__udivmodsi4>
    21f6:	da 01       	movw	r26, r20
    21f8:	c9 01       	movw	r24, r18
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	80 93 97 01 	sts	0x0197, r24
    220a:	90 93 98 01 	sts	0x0198, r25
    220e:	a0 93 99 01 	sts	0x0199, r26
    2212:	b0 93 9a 01 	sts	0x019A, r27

			Frequency = ((8000000/256) / (TON + TOFF));
    2216:	20 91 8f 01 	lds	r18, 0x018F
    221a:	30 91 90 01 	lds	r19, 0x0190
    221e:	40 91 91 01 	lds	r20, 0x0191
    2222:	50 91 92 01 	lds	r21, 0x0192
    2226:	80 91 93 01 	lds	r24, 0x0193
    222a:	90 91 94 01 	lds	r25, 0x0194
    222e:	a0 91 95 01 	lds	r26, 0x0195
    2232:	b0 91 96 01 	lds	r27, 0x0196
    2236:	28 0f       	add	r18, r24
    2238:	39 1f       	adc	r19, r25
    223a:	4a 1f       	adc	r20, r26
    223c:	5b 1f       	adc	r21, r27
    223e:	82 e1       	ldi	r24, 0x12	; 18
    2240:	9a e7       	ldi	r25, 0x7A	; 122
    2242:	a0 e0       	ldi	r26, 0x00	; 0
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 30 12 	call	0x2460	; 0x2460 <__udivmodsi4>
    224e:	da 01       	movw	r26, r20
    2250:	c9 01       	movw	r24, r18
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	80 93 9b 01 	sts	0x019B, r24
    2262:	90 93 9c 01 	sts	0x019C, r25
    2266:	a0 93 9d 01 	sts	0x019D, r26
    226a:	b0 93 9e 01 	sts	0x019E, r27
			Time_Flag = 0;
    226e:	10 92 8d 01 	sts	0x018D, r1

			LCD_vidSendCommand(0x80);
    2272:	80 e8       	ldi	r24, 0x80	; 128
    2274:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
			LCD_vidSendString( "DutyCycle =");
    2278:	80 e6       	ldi	r24, 0x60	; 96
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_vidSendString>
			LCD_vidWriteNumber( (u32)DutyCycle   );
    2280:	80 91 97 01 	lds	r24, 0x0197
    2284:	90 91 98 01 	lds	r25, 0x0198
    2288:	a0 91 99 01 	lds	r26, 0x0199
    228c:	b0 91 9a 01 	lds	r27, 0x019A
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_vidWriteNumber>
			LCD_vidSendData('%');
    22a0:	85 e2       	ldi	r24, 0x25	; 37
    22a2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <LCD_vidSendData>


			LCD_vidSendCommand(0xC0);
    22a6:	80 ec       	ldi	r24, 0xC0	; 192
    22a8:	0e 94 99 0c 	call	0x1932	; 0x1932 <LCD_vidSendCommand>
			LCD_vidSendString( "Frequency =");
    22ac:	8c e6       	ldi	r24, 0x6C	; 108
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_vidSendString>
			LCD_vidWriteNumber( Frequency   );
    22b4:	80 91 9b 01 	lds	r24, 0x019B
    22b8:	90 91 9c 01 	lds	r25, 0x019C
    22bc:	a0 91 9d 01 	lds	r26, 0x019D
    22c0:	b0 91 9e 01 	lds	r27, 0x019E
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_vidWriteNumber>
			LCD_vidSendString( "HZ");
    22d4:	88 e7       	ldi	r24, 0x78	; 120
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <LCD_vidSendString>
    22dc:	5e cf       	rjmp	.-324    	; 0x219a <main+0x44>

000022de <App_vidOverFlowCounter>:


}

void App_vidOverFlowCounter(void)
{
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
	OV_Counter++;
    22e6:	80 91 8e 01 	lds	r24, 0x018E
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	80 93 8e 01 	sts	0x018E, r24
}
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <App_vidDetectEdge>:

void App_vidDetectEdge(void)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <App_vidDetectEdge+0x6>
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
	if( 0 == flag )
    2300:	80 91 8c 01 	lds	r24, 0x018C
    2304:	88 23       	and	r24, r24
    2306:	59 f4       	brne	.+22     	; 0x231e <App_vidDetectEdge+0x28>
	{
		Timer0_vidInit();
    2308:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <Timer0_vidInit>
		IN0_vidSenseControl(FALLING);
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <IN0_vidSenseControl>
		OV_Counter = 0;
    2312:	10 92 8e 01 	sts	0x018E, r1
		flag       = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	80 93 8c 01 	sts	0x018C, r24
    231c:	56 c0       	rjmp	.+172    	; 0x23ca <App_vidDetectEdge+0xd4>
	}
	else if( 1 == flag )
    231e:	80 91 8c 01 	lds	r24, 0x018C
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	31 f5       	brne	.+76     	; 0x2372 <App_vidDetectEdge+0x7c>
	{
		u8 Timer_Val = Timer0_u8GetCounterRegistr();
    2326:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Timer0_u8GetCounterRegistr>
    232a:	8a 83       	std	Y+2, r24	; 0x02
		Timer0_u8SetCounterRegistr(0);
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <Timer0_u8SetCounterRegistr>

		TON =  Timer_Val + (OV_Counter * 256);
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	80 91 8e 01 	lds	r24, 0x018E
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	98 2f       	mov	r25, r24
    2342:	88 27       	eor	r24, r24
    2344:	82 0f       	add	r24, r18
    2346:	93 1f       	adc	r25, r19
    2348:	aa 27       	eor	r26, r26
    234a:	97 fd       	sbrc	r25, 7
    234c:	a0 95       	com	r26
    234e:	ba 2f       	mov	r27, r26
    2350:	80 93 8f 01 	sts	0x018F, r24
    2354:	90 93 90 01 	sts	0x0190, r25
    2358:	a0 93 91 01 	sts	0x0191, r26
    235c:	b0 93 92 01 	sts	0x0192, r27

		IN0_vidSenseControl(RISING);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <IN0_vidSenseControl>

		OV_Counter = 0;
    2366:	10 92 8e 01 	sts	0x018E, r1
		flag       = 2;
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	80 93 8c 01 	sts	0x018C, r24
    2370:	2c c0       	rjmp	.+88     	; 0x23ca <App_vidDetectEdge+0xd4>

	}
	else if( 2 == flag )
    2372:	80 91 8c 01 	lds	r24, 0x018C
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	41 f5       	brne	.+80     	; 0x23ca <App_vidDetectEdge+0xd4>
	{
		u8 Timer_Val = Timer0_u8GetCounterRegistr();
    237a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <Timer0_u8GetCounterRegistr>
    237e:	89 83       	std	Y+1, r24	; 0x01
		Timer0_u8SetCounterRegistr(0);
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <Timer0_u8SetCounterRegistr>

		TOFF =  Timer_Val + (OV_Counter * 256);
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	80 91 8e 01 	lds	r24, 0x018E
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	98 2f       	mov	r25, r24
    2396:	88 27       	eor	r24, r24
    2398:	82 0f       	add	r24, r18
    239a:	93 1f       	adc	r25, r19
    239c:	aa 27       	eor	r26, r26
    239e:	97 fd       	sbrc	r25, 7
    23a0:	a0 95       	com	r26
    23a2:	ba 2f       	mov	r27, r26
    23a4:	80 93 93 01 	sts	0x0193, r24
    23a8:	90 93 94 01 	sts	0x0194, r25
    23ac:	a0 93 95 01 	sts	0x0195, r26
    23b0:	b0 93 96 01 	sts	0x0196, r27

		IN0_vidSenseControl(FALLING);
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <IN0_vidSenseControl>
		OV_Counter = 0;
    23ba:	10 92 8e 01 	sts	0x018E, r1
		flag       = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 8c 01 	sts	0x018C, r24
		Time_Flag  = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	80 93 8d 01 	sts	0x018D, r24
	}
}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <__mulsi3>:
    23d4:	62 9f       	mul	r22, r18
    23d6:	d0 01       	movw	r26, r0
    23d8:	73 9f       	mul	r23, r19
    23da:	f0 01       	movw	r30, r0
    23dc:	82 9f       	mul	r24, r18
    23de:	e0 0d       	add	r30, r0
    23e0:	f1 1d       	adc	r31, r1
    23e2:	64 9f       	mul	r22, r20
    23e4:	e0 0d       	add	r30, r0
    23e6:	f1 1d       	adc	r31, r1
    23e8:	92 9f       	mul	r25, r18
    23ea:	f0 0d       	add	r31, r0
    23ec:	83 9f       	mul	r24, r19
    23ee:	f0 0d       	add	r31, r0
    23f0:	74 9f       	mul	r23, r20
    23f2:	f0 0d       	add	r31, r0
    23f4:	65 9f       	mul	r22, r21
    23f6:	f0 0d       	add	r31, r0
    23f8:	99 27       	eor	r25, r25
    23fa:	72 9f       	mul	r23, r18
    23fc:	b0 0d       	add	r27, r0
    23fe:	e1 1d       	adc	r30, r1
    2400:	f9 1f       	adc	r31, r25
    2402:	63 9f       	mul	r22, r19
    2404:	b0 0d       	add	r27, r0
    2406:	e1 1d       	adc	r30, r1
    2408:	f9 1f       	adc	r31, r25
    240a:	bd 01       	movw	r22, r26
    240c:	cf 01       	movw	r24, r30
    240e:	11 24       	eor	r1, r1
    2410:	08 95       	ret

00002412 <__udivmodhi4>:
    2412:	aa 1b       	sub	r26, r26
    2414:	bb 1b       	sub	r27, r27
    2416:	51 e1       	ldi	r21, 0x11	; 17
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <__udivmodhi4_ep>

0000241a <__udivmodhi4_loop>:
    241a:	aa 1f       	adc	r26, r26
    241c:	bb 1f       	adc	r27, r27
    241e:	a6 17       	cp	r26, r22
    2420:	b7 07       	cpc	r27, r23
    2422:	10 f0       	brcs	.+4      	; 0x2428 <__udivmodhi4_ep>
    2424:	a6 1b       	sub	r26, r22
    2426:	b7 0b       	sbc	r27, r23

00002428 <__udivmodhi4_ep>:
    2428:	88 1f       	adc	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	5a 95       	dec	r21
    242e:	a9 f7       	brne	.-22     	; 0x241a <__udivmodhi4_loop>
    2430:	80 95       	com	r24
    2432:	90 95       	com	r25
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	08 95       	ret

0000243a <__divmodhi4>:
    243a:	97 fb       	bst	r25, 7
    243c:	09 2e       	mov	r0, r25
    243e:	07 26       	eor	r0, r23
    2440:	0a d0       	rcall	.+20     	; 0x2456 <__divmodhi4_neg1>
    2442:	77 fd       	sbrc	r23, 7
    2444:	04 d0       	rcall	.+8      	; 0x244e <__divmodhi4_neg2>
    2446:	e5 df       	rcall	.-54     	; 0x2412 <__udivmodhi4>
    2448:	06 d0       	rcall	.+12     	; 0x2456 <__divmodhi4_neg1>
    244a:	00 20       	and	r0, r0
    244c:	1a f4       	brpl	.+6      	; 0x2454 <__divmodhi4_exit>

0000244e <__divmodhi4_neg2>:
    244e:	70 95       	com	r23
    2450:	61 95       	neg	r22
    2452:	7f 4f       	sbci	r23, 0xFF	; 255

00002454 <__divmodhi4_exit>:
    2454:	08 95       	ret

00002456 <__divmodhi4_neg1>:
    2456:	f6 f7       	brtc	.-4      	; 0x2454 <__divmodhi4_exit>
    2458:	90 95       	com	r25
    245a:	81 95       	neg	r24
    245c:	9f 4f       	sbci	r25, 0xFF	; 255
    245e:	08 95       	ret

00002460 <__udivmodsi4>:
    2460:	a1 e2       	ldi	r26, 0x21	; 33
    2462:	1a 2e       	mov	r1, r26
    2464:	aa 1b       	sub	r26, r26
    2466:	bb 1b       	sub	r27, r27
    2468:	fd 01       	movw	r30, r26
    246a:	0d c0       	rjmp	.+26     	; 0x2486 <__udivmodsi4_ep>

0000246c <__udivmodsi4_loop>:
    246c:	aa 1f       	adc	r26, r26
    246e:	bb 1f       	adc	r27, r27
    2470:	ee 1f       	adc	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	a2 17       	cp	r26, r18
    2476:	b3 07       	cpc	r27, r19
    2478:	e4 07       	cpc	r30, r20
    247a:	f5 07       	cpc	r31, r21
    247c:	20 f0       	brcs	.+8      	; 0x2486 <__udivmodsi4_ep>
    247e:	a2 1b       	sub	r26, r18
    2480:	b3 0b       	sbc	r27, r19
    2482:	e4 0b       	sbc	r30, r20
    2484:	f5 0b       	sbc	r31, r21

00002486 <__udivmodsi4_ep>:
    2486:	66 1f       	adc	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	1a 94       	dec	r1
    2490:	69 f7       	brne	.-38     	; 0x246c <__udivmodsi4_loop>
    2492:	60 95       	com	r22
    2494:	70 95       	com	r23
    2496:	80 95       	com	r24
    2498:	90 95       	com	r25
    249a:	9b 01       	movw	r18, r22
    249c:	ac 01       	movw	r20, r24
    249e:	bd 01       	movw	r22, r26
    24a0:	cf 01       	movw	r24, r30
    24a2:	08 95       	ret

000024a4 <__prologue_saves__>:
    24a4:	2f 92       	push	r2
    24a6:	3f 92       	push	r3
    24a8:	4f 92       	push	r4
    24aa:	5f 92       	push	r5
    24ac:	6f 92       	push	r6
    24ae:	7f 92       	push	r7
    24b0:	8f 92       	push	r8
    24b2:	9f 92       	push	r9
    24b4:	af 92       	push	r10
    24b6:	bf 92       	push	r11
    24b8:	cf 92       	push	r12
    24ba:	df 92       	push	r13
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	ca 1b       	sub	r28, r26
    24ce:	db 0b       	sbc	r29, r27
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	09 94       	ijmp

000024dc <__epilogue_restores__>:
    24dc:	2a 88       	ldd	r2, Y+18	; 0x12
    24de:	39 88       	ldd	r3, Y+17	; 0x11
    24e0:	48 88       	ldd	r4, Y+16	; 0x10
    24e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    24e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ee:	b9 84       	ldd	r11, Y+9	; 0x09
    24f0:	c8 84       	ldd	r12, Y+8	; 0x08
    24f2:	df 80       	ldd	r13, Y+7	; 0x07
    24f4:	ee 80       	ldd	r14, Y+6	; 0x06
    24f6:	fd 80       	ldd	r15, Y+5	; 0x05
    24f8:	0c 81       	ldd	r16, Y+4	; 0x04
    24fa:	1b 81       	ldd	r17, Y+3	; 0x03
    24fc:	aa 81       	ldd	r26, Y+2	; 0x02
    24fe:	b9 81       	ldd	r27, Y+1	; 0x01
    2500:	ce 0f       	add	r28, r30
    2502:	d1 1d       	adc	r29, r1
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	de bf       	out	0x3e, r29	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	cd bf       	out	0x3d, r28	; 61
    250e:	ed 01       	movw	r28, r26
    2510:	08 95       	ret

00002512 <_exit>:
    2512:	f8 94       	cli

00002514 <__stop_program>:
    2514:	ff cf       	rjmp	.-2      	; 0x2514 <__stop_program>
